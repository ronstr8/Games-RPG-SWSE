package Games::RPG::SWSE::Class;

=head1 NAME

Games::RPG::SWSE::Class - An SWSE class

=head1 SYNOPSIS

=head1 DESCRIPTION

=cut

use strict;
use warnings;
use English qw( -no_match_vars );

our $VERSION = '0.00';

use Carp;

use Moose;
extends qw( Games::RPG::SWSE::Base );


=head1 ATTRIBUTES

Object attributes.

=cut

=head2 level

The level achieved in this class.  This should always be 1, as a class object
is added for each level taken in the class, representing that level.

=cut

sub _build__level_or_rank { 1 }


=head2 heroic_level

The heroic level attained upon choosing this class.

=cut

has 'heroic_level' => (
	'is'       => 'rw',
	'isa'      => 'Int',
	'required' => 1,
);

=head2 base_force_points

The base number of Force points achieved per level.  Add half the character's
heroic level to get the total.

=cut

has 'base_force_points' => (
	'is'         => 'rw',
	'isa'        => 'Int',
	'lazy_build' => 1,
);
sub _build_base_force_points { 5 }

=head2 hit_die

The hit die used to determine hit points when a character gains a level in this
class.

=cut

has 'hit_die' => (
	'is'         => 'rw',
	'isa'        => 'Str',
	'lazy_build' => 1,
);
sub _build_hit_die { 'd6' }

=head2 base_trained_skills_at_first_level

The base number of trained skills given to a character taking this class as
their first.  Add the character's intelligence bonus to determine the total.

=cut

has 'base_trained_skills_at_first_level' => (
	'is'         => 'rw',
	'isa'        => 'Int',
	'lazy_build' => 1,
);
sub _build_base_trained_skills_at_first_level { 0 }

=head2 starting_credits_dice

A description of the die roll to generate starting credits for this character.

=cut

has 'starting_credits_dice' => (
	'is'         => 'rw',
	'isa'        => 'Str',
	'lazy_build' => 1,
);
sub _build_starting_credits_dice { '3d4x250' }

=head2 starting_credits

Credits with which the character begins play, generated by rolling the dice
specified by L<starting_credits_dice>.

=cut

has 'starting_credits' => (
	'is'         => 'rw',
	'isa'        => 'Int',
	'lazy_build' => 1,
);
sub _build_starting_credits { my $self = shift; $self->dice($self->starting_credits_dice) };

=head2 defense_bonuses

A hash-ref keyed on the L<Games::RPG::SWSE::Defense/id> of each of the three
defense bonuses, with values of the defense bonus bestowed by a character
having a level in this class.

=cut

has 'defense_bonuses' => (
	'is'         => 'rw',
	'isa'        => 'HashRef',
	'traits'     => [qw( Hash )],
	'handles'    => {
			'defense_bonus'       => [qw( get      )],

			'fortitude_bonus'     => [qw( get DefenseFORT )],
			'reflex_bonus'        => [qw( get DefenseREF  )],
			'willpower_bonus'     => [qw( get DefenseWILL )],

			'set_fortitude_bonus' => [qw( set DefenseFORT )],
			'set_reflex_bonus'    => [qw( set DefenseREF  )],
			'set_willpower_bonus' => [qw( set DefenseWILL )],
		},
	'lazy_build' => 1,
);
sub _build_defense_bonuses { +{ 'DefenseFORT' => 0, 'DefenseREF' => 0, 'DefenseWILL' => 0 } }

=head2 base_attack_bonuses

An array-ref of base attack bonuses, each index corresponding to a level in
this class.  (With a meaningless 0-th index.)

=cut

has 'base_attack_bonuses' =>
(
	'is'         => 'rw',
	'isa'        => 'ArrayRef',
	'traits'     => [qw( Array )],
	'handles'    => {
			'base_attack_bonus_for_level' => 'get',
		},
	'lazy_build' => 1,
);
sub _build_base_attack_bonuses { [] }

=head2 hit_points

Hit points granted in this level of this class.

=cut

has 'hit_points' => (
	'is'         => 'rw',
	'isa'        => 'Int',
	'lazy_build' => 1,
);
sub _build_hit_points
{
	my $self = shift;
	my $char = $self->character;

	my $hp =  $self->roll_dice($self->hit_die);
	   $hp += $char->ability('CON')->modifier if $char;

	return $hp;
}

=head2 increased_abilities ( @Games::RPG::SWSE::Ability->id )

=cut

has 'increased_abilities' => (
	'is'      => 'rw',
	'isa'     => 'ArrayRef',
	'default' => sub { +[] },
);

no Moose; __PACKAGE__->meta->make_immutable;

=head1 METHODS

Methods called on an instantiated object.

=cut

=head2 base_attack_bonus

The base attack bonus bestowed by having the current L<level> in this class.

=cut

sub base_attack_bonus
{
	my $self = shift;

	my $levels_in_class = $self->character->levels_in_class($self->id);
	return $self->base_attack_bonus_for_level($levels_in_class);
}

sub score_as_text_blurb
{
	my($self, $char) = @ARG;

	my $score = $self->character->levels_in_class($self->id);
	return sprintf('%3.3s', $score // '');
}

sub base_modifier_as_text_blurb { ' ' x 7 }

sub _build_modifier_of
{
	my $self      = shift;
	my @abilities = @{ $self->increased_abilities };

	my %mods;

	foreach my $stat_id (@abilities) {
	   $mods{$stat_id} = sub { shift->_increase_ability(@ARG) };
	}

	return \%mods;
}

sub _increase_ability
{
	my($self, $char, $stat, $mod) = @ARG;
	$stat->inc_score; ## $stat->score( $stat->score + 1 );
	$stat->clear_modifier;
	return;
}

sub describe_modifiers
{
	my($self, $char, $stat, $current_mod) = @ARG;

	return unless $self->is_modifier_of($stat->id);

	my @abilities = @{ $self->increased_abilities };
	return unless @abilities;

	my $hl = $self->heroic_level;
	return "HL${hl}/+1";
}

1;

__END__

=head1 SEE ALSO

=over

=item * L<Something> - Does something

=back

=head1 AUTHOR

Ron "Quinn" Straight E<lt>quinnfazigu@gmail.comE<gt>

=head1 COPYRIGHT AND LICENSE

Public domain.  Free to use and distribute, attribution appreciated.

=cut



